{"name": "test_add_member", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"text-grey-800 cursor-pointer xxl:text-base xl:text-base lg:text-sm md:text-xs group-hover:text-white \" href=\"/teams/members\">...</a> is not clickable at point (545, 40). Other element would receive the click: <dialog class=\"rounded-xl animate-modalAnimation overflow-auto\" open=\"\">...</dialog>\n  (Session info: chrome=129.0.6668.101)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7429EB095+29557]\n\t(No symbol) [0x00007FF74295FA50]\n\t(No symbol) [0x00007FF74281B56A]\n\t(No symbol) [0x00007FF74287737E]\n\t(No symbol) [0x00007FF742874DCC]\n\t(No symbol) [0x00007FF742872288]\n\t(No symbol) [0x00007FF74287149A]\n\t(No symbol) [0x00007FF74286354E]\n\t(No symbol) [0x00007FF74289718A]\n\t(No symbol) [0x00007FF742862E86]\n\t(No symbol) [0x00007FF7428973A0]\n\t(No symbol) [0x00007FF7428B851C]\n\t(No symbol) [0x00007FF742896F33]\n\t(No symbol) [0x00007FF74286116F]\n\t(No symbol) [0x00007FF7428622D1]\n\tGetHandleVerifier [0x00007FF742D1C96D+3378253]\n\tGetHandleVerifier [0x00007FF742D68497+3688311]\n\tGetHandleVerifier [0x00007FF742D5D1CB+3642539]\n\tGetHandleVerifier [0x00007FF742AAA6B6+813462]\n\t(No symbol) [0x00007FF74296AB5F]\n\t(No symbol) [0x00007FF742966B74]\n\t(No symbol) [0x00007FF742966D10]\n\t(No symbol) [0x00007FF742955C1F]\n\tBaseThreadInitThunk [0x00007FF80ABF7374+20]\n\tRtlUserThreadStart [0x00007FF80AD3CC91+33]", "trace": "self = <team.test_teams.TestTeam object at 0x0000027FA5A7EA40>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1396844977238d4a6ff0e6afa55d71be\")>\n\n>   ???\n\nC:\\Users\\Kajal\\Desktop\\Fonu\\team\\test_teams.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nteam\\page_teams.py:16: in click_teams_heading\n    self.click_element('XPATH', teams_heading_xpath)\nhelpers\\base_page.py:59: in click_element\n    element.click()\n..\\..\\AppData\\Roaming\\Python\\Python310\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Roaming\\Python\\Python310\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Roaming\\Python\\Python310\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027FA5A7FA30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF742955C1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FF80ABF7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF80AD3CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"text-grey-800 cursor-pointer xxl:text-base xl:text-base lg:text-sm md:text-xs group-hover:text-white \" href=\"/teams/members\">...</a> is not clickable at point (545, 40). Other element would receive the click: <dialog class=\"rounded-xl animate-modalAnimation overflow-auto\" open=\"\">...</dialog>\nE         (Session info: chrome=129.0.6668.101)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7429EB095+29557]\nE       \t(No symbol) [0x00007FF74295FA50]\nE       \t(No symbol) [0x00007FF74281B56A]\nE       \t(No symbol) [0x00007FF74287737E]\nE       \t(No symbol) [0x00007FF742874DCC]\nE       \t(No symbol) [0x00007FF742872288]\nE       \t(No symbol) [0x00007FF74287149A]\nE       \t(No symbol) [0x00007FF74286354E]\nE       \t(No symbol) [0x00007FF74289718A]\nE       \t(No symbol) [0x00007FF742862E86]\nE       \t(No symbol) [0x00007FF7428973A0]\nE       \t(No symbol) [0x00007FF7428B851C]\nE       \t(No symbol) [0x00007FF742896F33]\nE       \t(No symbol) [0x00007FF74286116F]\nE       \t(No symbol) [0x00007FF7428622D1]\nE       \tGetHandleVerifier [0x00007FF742D1C96D+3378253]\nE       \tGetHandleVerifier [0x00007FF742D68497+3688311]\nE       \tGetHandleVerifier [0x00007FF742D5D1CB+3642539]\nE       \tGetHandleVerifier [0x00007FF742AAA6B6+813462]\nE       \t(No symbol) [0x00007FF74296AB5F]\nE       \t(No symbol) [0x00007FF742966B74]\nE       \t(No symbol) [0x00007FF742966D10]\nE       \t(No symbol) [0x00007FF742955C1F]\nE       \tBaseThreadInitThunk [0x00007FF80ABF7374+20]\nE       \tRtlUserThreadStart [0x00007FF80AD3CC91+33]\n\n..\\..\\AppData\\Roaming\\Python\\Python310\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "log", "source": "0fb4f441-b306-4a0d-bd77-da07a55742a3-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "c859dd6e-b512-4c08-8139-7d6435acbbdd-attachment.txt", "type": "text/plain"}], "start": 1729508345025, "stop": 1729508352251, "uuid": "df77c671-f90a-47af-9ba4-a4568b8ec7cc", "historyId": "029f0ecec175207ace69ae290a0e1cc8", "testCaseId": "029f0ecec175207ace69ae290a0e1cc8", "fullName": "team.test_teams.TestTeam#test_add_member", "labels": [{"name": "story", "value": "Verify member is added successfully."}, {"name": "feature", "value": "Adding a member"}, {"name": "parentSuite", "value": "team"}, {"name": "suite", "value": "test_teams"}, {"name": "subSuite", "value": "TestTeam"}, {"name": "host", "value": "DESKTOP-KARQK2V"}, {"name": "thread", "value": "14844-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "team.test_teams"}]}